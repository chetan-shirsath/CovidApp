{"version":3,"sources":["Components/CovidTableComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["CovidTableComponent","props","state","items","fetch","then","res","json","result","console","log","setState","error","this","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","item","key","scope","positive","negative","total","death","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"2UAUaA,EAAb,kDAEI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACXC,MAAO,IAHM,EAFvB,gEAS2B,IAAD,OAClBC,MAAM,wCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACGC,QAAQC,IAAIF,GACd,EAAKG,SAAS,CACZR,MAAOK,OAIX,SAACI,GACC,EAAKD,SAAS,CACZC,eAtBhB,+BA4Ba,IAAUT,EAAUU,KAAKX,MAAfC,MACnB,OACA,kBAACW,EAAA,EAAD,CAAgBC,UAAWC,KACzB,kBAACC,EAAA,EAAD,CAAOC,UAAU,QAAQC,aAAW,gBAClC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,cACA,kBAACA,EAAA,EAAD,CAAWC,MAAM,SAAjB,YACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,YACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,SACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,WAGJ,kBAACC,EAAA,EAAD,KACGrB,EAAMsB,KAAI,SAACC,GAAD,OACT,kBAACL,EAAA,EAAD,CAAUM,IAAKD,EAAKxB,OAClB,kBAACoB,EAAA,EAAD,CAAWP,UAAU,KAAKa,MAAM,OAC7BF,EAAKxB,OAER,kBAACoB,EAAA,EAAD,CAAWC,MAAM,SAASG,EAAKG,UAC/B,kBAACP,EAAA,EAAD,CAAWC,MAAM,SAASG,EAAKI,UAC/B,kBAACR,EAAA,EAAD,CAAWC,MAAM,SAASG,EAAKK,OAC/B,kBAACT,EAAA,EAAD,CAAWC,MAAM,SAASG,EAAKM,kBAlD7C,GAAyCC,IAAMC,WCkBhCC,MAvBf,WACE,OACE,yBAAKjB,UAAU,OAEb,kBAAC,EAAD,QCGckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLH,QAAQG,MAAMA,EAAMwC,c","file":"static/js/main.75ce8bc7.chunk.js","sourcesContent":["import React from 'react';\r\n//import { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nexport class CovidTableComponent extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          items: []\r\n        };\r\n      }\r\n    \r\n      componentDidMount() {\r\n        fetch(\"https://covidtracking.com/api/states\")\r\n          .then(res => res.json())\r\n          .then(\r\n            (result) => {\r\n                console.log(result);\r\n              this.setState({\r\n                items: result\r\n              });\r\n            },\r\n\r\n            (error) => {\r\n              this.setState({\r\n                error\r\n              });\r\n            }\r\n          )\r\n      }\r\n\r\n    render(){  const { items } = this.state; \r\n    return (\r\n    <TableContainer component={Paper}>\r\n      <Table className='table' aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>State</TableCell>\r\n            <TableCell align=\"right\">Positive</TableCell>\r\n            <TableCell align=\"right\">Negative</TableCell>\r\n            <TableCell align=\"right\">Total</TableCell>\r\n            <TableCell align=\"right\">Death</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {items.map((item) => (\r\n            <TableRow key={item.state}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {item.state}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{item.positive}</TableCell>\r\n              <TableCell align=\"right\">{item.negative}</TableCell>\r\n              <TableCell align=\"right\">{item.total}</TableCell>\r\n              <TableCell align=\"right\">{item.death}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n}\r\n\r\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { CovidTableComponent } from './Components/CovidTableComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <CovidTableComponent/>\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}